/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  NodeFile,
  FileListFromTaskNextOptionalParams,
  FileListFromTaskOptionalParams,
  FileListFromComputeNodeNextOptionalParams,
  FileListFromComputeNodeOptionalParams,
  FileDeleteFromTaskOptionalParams,
  FileDeleteFromTaskResponse,
  FileGetFromTaskOptionalParams,
  FileGetFromTaskResponse,
  FileGetPropertiesFromTaskOptionalParams,
  FileGetPropertiesFromTaskResponse,
  FileDeleteFromComputeNodeOptionalParams,
  FileDeleteFromComputeNodeResponse,
  FileGetFromComputeNodeOptionalParams,
  FileGetFromComputeNodeResponse,
  FileGetPropertiesFromComputeNodeOptionalParams,
  FileGetPropertiesFromComputeNodeResponse,
  FileListFromTaskResponse,
  FileListFromComputeNodeResponse,
  FileListFromTaskNextResponse,
  FileListFromComputeNodeNextResponse
} from "../models";

/** Class representing a File. */
export class File {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class File class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Lists the files in a Task's directory on its Compute Node.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose files you want to list.
   * @param options The options parameters.
   */
  public listFromTask(
    jobId: string,
    taskId: string,
    options?: FileListFromTaskOptionalParams
  ): PagedAsyncIterableIterator<NodeFile> {
    const iter = this.listFromTaskPagingAll(jobId, taskId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listFromTaskPagingPage(jobId, taskId, options);
      }
    };
  }

  private async *listFromTaskPagingPage(
    jobId: string,
    taskId: string,
    options?: FileListFromTaskOptionalParams
  ): AsyncIterableIterator<NodeFile[]> {
    let result = await this._listFromTask(jobId, taskId, options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listFromTaskNext(
        jobId,
        taskId,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listFromTaskPagingAll(
    jobId: string,
    taskId: string,
    options?: FileListFromTaskOptionalParams
  ): AsyncIterableIterator<NodeFile> {
    for await (const page of this.listFromTaskPagingPage(
      jobId,
      taskId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all of the files in Task directories on the specified Compute Node.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node whose files you want to list.
   * @param options The options parameters.
   */
  public listFromComputeNode(
    poolId: string,
    nodeId: string,
    options?: FileListFromComputeNodeOptionalParams
  ): PagedAsyncIterableIterator<NodeFile> {
    const iter = this.listFromComputeNodePagingAll(poolId, nodeId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listFromComputeNodePagingPage(poolId, nodeId, options);
      }
    };
  }

  private async *listFromComputeNodePagingPage(
    poolId: string,
    nodeId: string,
    options?: FileListFromComputeNodeOptionalParams
  ): AsyncIterableIterator<NodeFile[]> {
    let result = await this._listFromComputeNode(poolId, nodeId, options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listFromComputeNodeNext(
        poolId,
        nodeId,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listFromComputeNodePagingAll(
    poolId: string,
    nodeId: string,
    options?: FileListFromComputeNodeOptionalParams
  ): AsyncIterableIterator<NodeFile> {
    for await (const page of this.listFromComputeNodePagingPage(
      poolId,
      nodeId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Deletes the specified Task file from the Compute Node where the Task ran.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to delete.
   * @param filePath The path to the Task file or directory that you want to delete.
   * @param options The options parameters.
   */
  deleteFromTask(
    jobId: string,
    taskId: string,
    filePath: string,
    options?: FileDeleteFromTaskOptionalParams
  ): Promise<FileDeleteFromTaskResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      jobId,
      taskId,
      filePath,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteFromTaskOperationSpec
    ) as Promise<FileDeleteFromTaskResponse>;
  }

  /**
   * Returns the content of the specified Task file.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to retrieve.
   * @param filePath The path to the Task file that you want to get the content of.
   * @param options The options parameters.
   */
  getFromTask(
    jobId: string,
    taskId: string,
    filePath: string,
    options?: FileGetFromTaskOptionalParams
  ): Promise<FileGetFromTaskResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      jobId,
      taskId,
      filePath,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getFromTaskOperationSpec
    ) as Promise<FileGetFromTaskResponse>;
  }

  /**
   * Gets the properties of the specified Task file.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to get the properties of.
   * @param filePath The path to the Task file that you want to get the properties of.
   * @param options The options parameters.
   */
  getPropertiesFromTask(
    jobId: string,
    taskId: string,
    filePath: string,
    options?: FileGetPropertiesFromTaskOptionalParams
  ): Promise<FileGetPropertiesFromTaskResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      jobId,
      taskId,
      filePath,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getPropertiesFromTaskOperationSpec
    ) as Promise<FileGetPropertiesFromTaskResponse>;
  }

  /**
   * Deletes the specified file from the Compute Node.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node from which you want to delete the file.
   * @param filePath The path to the file or directory that you want to delete.
   * @param options The options parameters.
   */
  deleteFromComputeNode(
    poolId: string,
    nodeId: string,
    filePath: string,
    options?: FileDeleteFromComputeNodeOptionalParams
  ): Promise<FileDeleteFromComputeNodeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      poolId,
      nodeId,
      filePath,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteFromComputeNodeOperationSpec
    ) as Promise<FileDeleteFromComputeNodeResponse>;
  }

  /**
   * Returns the content of the specified Compute Node file.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the content of.
   * @param options The options parameters.
   */
  getFromComputeNode(
    poolId: string,
    nodeId: string,
    filePath: string,
    options?: FileGetFromComputeNodeOptionalParams
  ): Promise<FileGetFromComputeNodeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      poolId,
      nodeId,
      filePath,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getFromComputeNodeOperationSpec
    ) as Promise<FileGetFromComputeNodeResponse>;
  }

  /**
   * Gets the properties of the specified Compute Node file.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the properties of.
   * @param options The options parameters.
   */
  getPropertiesFromComputeNode(
    poolId: string,
    nodeId: string,
    filePath: string,
    options?: FileGetPropertiesFromComputeNodeOptionalParams
  ): Promise<FileGetPropertiesFromComputeNodeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      poolId,
      nodeId,
      filePath,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getPropertiesFromComputeNodeOperationSpec
    ) as Promise<FileGetPropertiesFromComputeNodeResponse>;
  }

  /**
   * Lists the files in a Task's directory on its Compute Node.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose files you want to list.
   * @param options The options parameters.
   */
  private _listFromTask(
    jobId: string,
    taskId: string,
    options?: FileListFromTaskOptionalParams
  ): Promise<FileListFromTaskResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      jobId,
      taskId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listFromTaskOperationSpec
    ) as Promise<FileListFromTaskResponse>;
  }

  /**
   * Lists all of the files in Task directories on the specified Compute Node.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node whose files you want to list.
   * @param options The options parameters.
   */
  private _listFromComputeNode(
    poolId: string,
    nodeId: string,
    options?: FileListFromComputeNodeOptionalParams
  ): Promise<FileListFromComputeNodeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      poolId,
      nodeId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listFromComputeNodeOperationSpec
    ) as Promise<FileListFromComputeNodeResponse>;
  }

  /**
   * ListFromTaskNext
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose files you want to list.
   * @param nextLink The nextLink from the previous successful call to the ListFromTask method.
   * @param options The options parameters.
   */
  private _listFromTaskNext(
    jobId: string,
    taskId: string,
    nextLink: string,
    options?: FileListFromTaskNextOptionalParams
  ): Promise<FileListFromTaskNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      jobId,
      taskId,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listFromTaskNextOperationSpec
    ) as Promise<FileListFromTaskNextResponse>;
  }

  /**
   * ListFromComputeNodeNext
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node whose files you want to list.
   * @param nextLink The nextLink from the previous successful call to the ListFromComputeNode method.
   * @param options The options parameters.
   */
  private _listFromComputeNodeNext(
    poolId: string,
    nodeId: string,
    nextLink: string,
    options?: FileListFromComputeNodeNextOptionalParams
  ): Promise<FileListFromComputeNodeNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      poolId,
      nodeId,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listFromComputeNodeNextOperationSpec
    ) as Promise<FileListFromComputeNodeNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const deleteFromTaskOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{jobId}/tasks/{taskId}/files/{filePath}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.FileDeleteFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.recursive,
    Parameters.timeout37
  ],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId,
    Parameters.taskId,
    Parameters.filePath
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId37,
    Parameters.returnClientRequestId37,
    Parameters.ocpDate37
  ],
  serializer
};
const getFromTaskOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{jobId}/tasks/{taskId}/files/{filePath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.FileGetFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout38],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId,
    Parameters.taskId,
    Parameters.filePath
  ],
  headerParameters: [
    Parameters.accept1,
    Parameters.clientRequestId38,
    Parameters.returnClientRequestId38,
    Parameters.ocpDate38,
    Parameters.ocpRange,
    Parameters.ifModifiedSince15,
    Parameters.ifUnmodifiedSince15
  ],
  serializer
};
const getPropertiesFromTaskOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{jobId}/tasks/{taskId}/files/{filePath}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.FileGetPropertiesFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout39],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId,
    Parameters.taskId,
    Parameters.filePath
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId39,
    Parameters.returnClientRequestId39,
    Parameters.ocpDate39,
    Parameters.ifModifiedSince16,
    Parameters.ifUnmodifiedSince16
  ],
  serializer
};
const deleteFromComputeNodeOperationSpec: coreHttp.OperationSpec = {
  path: "/pools/{poolId}/nodes/{nodeId}/files/{filePath}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.FileDeleteFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.recursive,
    Parameters.timeout40
  ],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId,
    Parameters.filePath,
    Parameters.nodeId
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId40,
    Parameters.returnClientRequestId40,
    Parameters.ocpDate40
  ],
  serializer
};
const getFromComputeNodeOperationSpec: coreHttp.OperationSpec = {
  path: "/pools/{poolId}/nodes/{nodeId}/files/{filePath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.FileGetFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout41],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId,
    Parameters.filePath,
    Parameters.nodeId
  ],
  headerParameters: [
    Parameters.accept1,
    Parameters.clientRequestId41,
    Parameters.returnClientRequestId41,
    Parameters.ocpDate41,
    Parameters.ocpRange1,
    Parameters.ifModifiedSince17,
    Parameters.ifUnmodifiedSince17
  ],
  serializer
};
const getPropertiesFromComputeNodeOperationSpec: coreHttp.OperationSpec = {
  path: "/pools/{poolId}/nodes/{nodeId}/files/{filePath}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.FileGetPropertiesFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout42],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId,
    Parameters.filePath,
    Parameters.nodeId
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId42,
    Parameters.returnClientRequestId42,
    Parameters.ocpDate42,
    Parameters.ifModifiedSince18,
    Parameters.ifUnmodifiedSince18
  ],
  serializer
};
const listFromTaskOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{jobId}/tasks/{taskId}/files",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.recursive,
    Parameters.filter8,
    Parameters.maxResults9,
    Parameters.timeout43
  ],
  urlParameters: [Parameters.batchUrl, Parameters.jobId, Parameters.taskId],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId43,
    Parameters.returnClientRequestId43,
    Parameters.ocpDate43
  ],
  serializer
};
const listFromComputeNodeOperationSpec: coreHttp.OperationSpec = {
  path: "/pools/{poolId}/nodes/{nodeId}/files",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.recursive,
    Parameters.filter9,
    Parameters.maxResults10,
    Parameters.timeout44
  ],
  urlParameters: [Parameters.batchUrl, Parameters.poolId, Parameters.nodeId],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId44,
    Parameters.returnClientRequestId44,
    Parameters.ocpDate44
  ],
  serializer
};
const listFromTaskNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromTaskNextHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.recursive,
    Parameters.filter8,
    Parameters.maxResults9,
    Parameters.timeout43
  ],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.nextLink,
    Parameters.jobId,
    Parameters.taskId
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId43,
    Parameters.returnClientRequestId43,
    Parameters.ocpDate43
  ],
  serializer
};
const listFromComputeNodeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromComputeNodeNextHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.recursive,
    Parameters.filter9,
    Parameters.maxResults10,
    Parameters.timeout44
  ],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.nextLink,
    Parameters.poolId,
    Parameters.nodeId
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId44,
    Parameters.returnClientRequestId44,
    Parameters.ocpDate44
  ],
  serializer
};
